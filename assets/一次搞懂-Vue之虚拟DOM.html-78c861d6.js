import{_ as p,r as e,o,c,a as n,b as s,d as t,e as l}from"./app-00a966d3.js";const i={},u=l(`<h1 id="vue-之虚拟-dom" tabindex="-1"><a class="header-anchor" href="#vue-之虚拟-dom" aria-hidden="true">#</a> Vue 之虚拟 DOM</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><h3 id="为什么要学习虚拟-dom" tabindex="-1"><a class="header-anchor" href="#为什么要学习虚拟-dom" aria-hidden="true">#</a> 为什么要学习虚拟 DOM</h3><p>尤大推荐，Vue.js 在用。 <img src="https://i.loli.net/2021/05/21/YmWge4I37CBz5Ji.png" alt="learnvDom.png"></p><h3 id="什么是虚拟-dom" tabindex="-1"><a class="header-anchor" href="#什么是虚拟-dom" aria-hidden="true">#</a> 什么是虚拟 DOM</h3><blockquote><p>就是用 JS 去按照 DOM 结构来实现的树形结构对象，你也可以叫做 DOM 对象</p></blockquote><p>比如：下边的 HTML 结构可以使用 JavaScript 对象的形式表达出来。</p><p>HTMl</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Item 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Item 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JavaScript</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token string">&quot;ul&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 节点标签名</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// DOM的属性，用一个对象存储键值对</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">// 该节点的子节点</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&quot;item&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Item 1&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&quot;item&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Item 2&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">tagName</span><span class="token operator">:</span> <span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&quot;item&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Item 3&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在通过<code>createElement</code>等 DOM API 操作完成从 JavaScript 对象=》真实 DOM 的转化。</p><h3 id="为什么要用虚拟-dom" tabindex="-1"><a class="header-anchor" href="#为什么要用虚拟-dom" aria-hidden="true">#</a> 为什么要用虚拟 DOM？</h3><ol><li>操作真实 DOM 花销很大，引起重绘、回流等</li><li>减少不必要的开销比如三个列表，比如现在替换一种一个列表，通过 diff 后，只需要操作一次列表（局部变动），这样可以提升性能。</li><li>其他的比如跨平台（RN、Weex、Flutter），组件的高度抽象化、可以更好的实现 SSR、同构渲染等</li></ol><h2 id="实现一个虚拟-dom" tabindex="-1"><a class="header-anchor" href="#实现一个虚拟-dom" aria-hidden="true">#</a> 实现一个虚拟 DOM</h2><p>使用 JavaScript 的对象结构去描述一个 DOM，然后渲染到页面上。 第一步：得有一个创建虚拟 DOM 的方法（称为 createElement） 第二步：通过虚拟 DOM 生成真实 DOM 的方法（render） 第三步：将生成后的真实 DOM 插入页面中(renderDom)</p><h3 id="创建虚拟-dom" tabindex="-1"><a class="header-anchor" href="#创建虚拟-dom" aria-hidden="true">#</a> 创建虚拟 DOM</h3><p>先来了解一个基本的 DOM 的组成:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Item 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分别对应三个属性：</p><ul><li>type：<code>div</code></li><li>props: <code>id=&quot;list&quot;</code></li><li>children：<code>{type: &quot;li&quot;,props:{class:&quot;item&quot;},children:&quot;Item 1&quot;}</code></li></ul><p>明确了属性和值，我们可以借助构造函数去批量的创建虚拟 DOM 了，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// element.js</span>
<span class="token keyword">class</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> children<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createElement</code>函数，用于将创建后的虚拟 DOM 返回</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// createElement.js</span>
<span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Element</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="生成真实-dom" tabindex="-1"><a class="header-anchor" href="#生成真实-dom" aria-hidden="true">#</a> 生成真实 DOM</h3><p>通过一个 render 函数将 vDOM 转化为真实的 DOM。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// render.js</span>
<span class="token comment">// render 方法可以将虚拟DOM转化为真是的DOM</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">vDom</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> vDom<span class="token punctuation">;</span>
  <span class="token comment">// 创建元素</span>
  <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 遍历props，设置属性</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setAttr</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> key<span class="token punctuation">,</span> props<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 遍历子节点</span>
  <span class="token comment">// 如果是虚拟DOM，就递归</span>
  <span class="token comment">// 不是就是文本节点，直接创建</span>
  children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">childEl</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    childEl <span class="token operator">=</span>
      childEl <span class="token keyword">instanceof</span> <span class="token class-name">Element</span>
        <span class="token operator">?</span> <span class="token function">render</span><span class="token punctuation">(</span>childEl<span class="token punctuation">)</span>
        <span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span>childEl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    el<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>childEl<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 创建完毕返回节点</span>
  <span class="token keyword">return</span> el<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 设置属性</span>
<span class="token keyword">function</span> <span class="token function">setAttr</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果是value，则表明是input、textarea节点</span>
    <span class="token keyword">let</span> tagName <span class="token operator">=</span> node<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tagName <span class="token operator">==</span> <span class="token string">&quot;input&quot;</span> <span class="token operator">||</span> tagName <span class="token operator">==</span> <span class="token string">&quot;textarea&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&quot;style&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 直接设置的行内样式</span>
    node<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置的属性 比如class、id、dataset等</span>
    node<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 renderDom 将生成后的真实 DOM 挂载到制定的元素上</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// renderDom.js</span>
<span class="token comment">// 将生成的真实DOM，添加到目标元素中</span>
<span class="token keyword">function</span> <span class="token function">renderDom</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  target<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><p>接下来，就是见证奇迹的时刻了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// index.js</span>
<span class="token comment">// 描述虚拟DOM的JS对象</span>
<span class="token keyword">let</span> jsDomObj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;ul&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&quot;list&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token function">createElement</span><span class="token punctuation">(</span>
      <span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&quot;item&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token string">&quot;周杰伦&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">createElement</span><span class="token punctuation">(</span>
      <span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&quot;item&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token string">&quot;林俊杰&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">createElement</span><span class="token punctuation">(</span>
      <span class="token string">&quot;li&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&quot;item&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token string">&quot;王力宏&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 通过createElement将JS对象转化为虚拟DOM</span>
<span class="token keyword">let</span> virtualDom <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>
  jsDomObj<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
  jsDomObj<span class="token punctuation">.</span>props<span class="token punctuation">,</span>
  jsDomObj<span class="token punctuation">.</span>children
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印 虚拟DOM</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;虚拟DOM\\n&quot;</span><span class="token punctuation">,</span> virtualDom<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 渲染虚拟DOM得到真实的DOM结构</span>
<span class="token keyword">let</span> el <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>virtualDom<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 打印 真实DOM</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;真实DOM\\n&quot;</span><span class="token punctuation">,</span> el<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 直接将DOM添加到页面内</span>
<span class="token function">renderDom</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开页面后，发现了 list 渲染成功！！ <img src="https://i.loli.net/2021/05/21/BwVA41jIMfo9J7m.png" alt="vDom2.png"> 我们可以查看控制台打印的结果： <img src="https://i.loli.net/2021/05/21/CspGVoALWk9tQ4x.png" alt="vDomandrDom.png"></p><h2 id="diff-算法" tabindex="-1"><a class="header-anchor" href="#diff-算法" aria-hidden="true">#</a> Diff 算法</h2><p>这就是所谓的 Virtual DOM 算法。包括几个步骤：</p><ol><li>用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中当状态变更的时候，重新构造一棵新的对象树。</li><li>然后用新的树和旧的树进行比较，记录两棵树差异把 2 所记录的差异应用到步骤 1 所构建的真正的 DOM 树上，视图就更新了 Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。</li></ol><p>可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）。</p><h3 id="结语" tabindex="-1"><a class="header-anchor" href="#结语" aria-hidden="true">#</a> 结语</h3><p>Vue 编译也分两个版本</p><ul><li>一个是运行时+编译器，比如使用 vue-cli，是通过 webpack 的 vue-loader 将模板编译成真实 DOM 的</li><li>一个是运行时，比如直接使用 CDN 将整个 Vue 代码引入到项目当中，则使用 render 方法编译的。</li></ul>`,41),r={href:"https://github.com/snabbdom/snabbdom",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/Matt-Esch/virtual-dom",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"完整代码地址：https://github.com/AnsonZnl/virtual-dom-study",-1),v=n("h2",{id:"参考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),s(" 参考")],-1),m={href:"https://juejin.cn/post/6844903806132568072",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/6844903895467032589",target:"_blank",rel:"noopener noreferrer"},h={href:"https://juejin.cn/post/6844903850520870926",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.jianshu.com/p/af0b398602bc",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github1s.com/vuejs/vue/blob/HEAD/src/core/vdom/vnode.js",target:"_blank",rel:"noopener noreferrer"},q={href:"https://ustbhuangyi.github.io/vue-analysis/v2/data-driven/virtual-dom.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/snabbdom/snabbdom",target:"_blank",rel:"noopener noreferrer"},D={href:"https://blog.csdn.net/dongcehao/article/details/107428437",target:"_blank",rel:"noopener noreferrer"};function M(O,_){const a=e("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("Vue.js 使用的 Virtual DOM 参考的是开源库 "),n("a",r,[s("github-snabbdom"),t(a)]),s(" 有兴趣的可以看一下他的源码。")]),n("p",null,[s("感谢"),n("a",d,[s("Matt-Esch/virtual-dom"),t(a)]),s("项目，带来的帮助。")]),k,v,n("ul",null,[n("li",null,[n("a",m,[s("让虚拟 DOM 不在成为你的绊脚石"),t(a)])]),n("li",null,[n("a",b,[s("深入剖析：Vue 核心之虚拟 DOM"),t(a)])]),n("li",null,[n("a",h,[s("我们真的需要虚拟 DOM 吗？"),t(a)])]),n("li",null,[n("a",g,[s("Vue 核心之虚拟 DOM"),t(a)])]),n("li",null,[n("a",y,[s("Vue2.x-vnode 源码"),t(a)])]),n("li",null,[n("a",q,[s("Vue.js 技术揭秘之 Vdom"),t(a)])]),n("li",null,[n("a",f,[s("Github-snabbdom"),t(a)])]),n("li",null,[n("a",D,[s("Vue3 的 Diff"),t(a)])])])])}const w=p(i,[["render",M],["__file","一次搞懂-Vue之虚拟DOM.html.vue"]]);export{w as default};
