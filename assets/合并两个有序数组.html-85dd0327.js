import{_ as p,r as t,o,c,a as n,b as s,d as l,e as a}from"./app-00a966d3.js";const u={},i=a(`<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h2><p>给你两个有序整数数组  <code>nums1</code> 和 <code>nums2</code>，请你将 <code>nums2</code> 合并到  <code>nums1</code>  中，使 <code>nums1</code> 成为一个有序数组。</p><p>初始化  <code>nums1</code> 和 <code>nums2</code> 的元素数量分别为  <code>m</code> 和 <code>n</code> 。你可以假设  <code>nums1</code> 的空间大小等于  <code>m + n</code>，这样它就有足够的空间保存来自 <code>nums2</code> 的元素。</p><p>示例 1：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
输出：[1,2,2,3,5,6]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums1 = [1], m = 1, nums2 = [], n = 0
输出：[1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>提示：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nums1.length == m + n
nums2.length == n
0 &lt;= m, n &lt;= 200
1 &lt;= m + n &lt;= 200
-109 &lt;= nums1[i], nums2[i] &lt;= 109
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),r={href:"https://leetcode-cn.com/problems/merge-sorted-array",target:"_blank",rel:"noopener noreferrer"},d=a(`<h2 id="解法" tabindex="-1"><a class="header-anchor" href="#解法" aria-hidden="true">#</a> 解法</h2><h3 id="合并后排序" tabindex="-1"><a class="header-anchor" href="#合并后排序" aria-hidden="true">#</a> 合并后排序</h3><p>最简单的方式，先合并在排序。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  nums1<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> nums1<span class="token punctuation">.</span>length <span class="token operator">-</span> m<span class="token punctuation">,</span> <span class="token operator">...</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  nums1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n+m+(log(n+m)))</li><li>空间复杂度：O(1)</li></ul><h3 id="双指针" tabindex="-1"><a class="header-anchor" href="#双指针" aria-hidden="true">#</a> 双指针</h3><p>分别遍历 nums1 和 nums2 每个元素，比对其大小，进行排序操作。</p><p><img src="https://assets.leetcode-cn.com/solution-static/88/1.gif" alt=""></p><p><strong>从前到后</strong></p><p>拷贝一份新的数组，然后将 nums2 和 copyNums1 从前往后进行对比，依次插入 nums1 中，缺点是需要占用额外的空间(copyNums1)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> copyNums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>nums1<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个和nums一样的数组</span>
  <span class="token keyword">let</span> len1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// nums1 的长度</span>
    len2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// nums2 的长度</span>
    cur <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 待插入的元素</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>len1 <span class="token operator">&lt;</span> m <span class="token operator">||</span> len2 <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>len1 <span class="token operator">===</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// nums1 到头了 设置nums2</span>
      cur <span class="token operator">=</span> nums2<span class="token punctuation">[</span>len2<span class="token punctuation">]</span><span class="token punctuation">;</span>
      len2<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>len2 <span class="token operator">===</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// nums2 到头了 设置nums1</span>
      cur <span class="token operator">=</span> copyNums1<span class="token punctuation">[</span>len1<span class="token punctuation">]</span><span class="token punctuation">;</span>
      len1<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>copyNums1<span class="token punctuation">[</span>len1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>len2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 比对大小 copyNums1的小 插入到nums1中</span>
      cur <span class="token operator">=</span> copyNums1<span class="token punctuation">[</span>len1<span class="token punctuation">]</span><span class="token punctuation">;</span>
      len1<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 不符合以上三种情况的，直接插入nums2</span>
      cur <span class="token operator">=</span> nums2<span class="token punctuation">[</span>len2<span class="token punctuation">]</span><span class="token punctuation">;</span>
      len2<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>len1<span class="token punctuation">,</span> len2<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    nums1<span class="token punctuation">[</span>len1 <span class="token operator">+</span> len2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n+m)</li><li>空间复杂度：O(m)：新建的 copynums1 大小为 m</li></ul><p><strong>从后到前</strong></p><p>不用创建新的空间，创建指针后直接在<code>nums1</code>上进行操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> len1 <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
    len2 <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
    len3 <span class="token operator">=</span> n <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>
    cur <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>len1 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> len2 <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>len1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cur <span class="token operator">=</span> nums2<span class="token punctuation">[</span>len2<span class="token punctuation">]</span><span class="token punctuation">;</span>
      len2<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>len2 <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cur <span class="token operator">=</span> nums1<span class="token punctuation">[</span>len1<span class="token punctuation">]</span><span class="token punctuation">;</span>
      len1<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>len1<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums1<span class="token punctuation">[</span>len2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cur <span class="token operator">=</span> nums1<span class="token punctuation">[</span>len1<span class="token punctuation">]</span><span class="token punctuation">;</span>
      len1<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      cur <span class="token operator">=</span> nums2<span class="token punctuation">[</span>len2<span class="token punctuation">]</span><span class="token punctuation">;</span>
      len2<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    nums1<span class="token punctuation">[</span>len3<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>
    len3<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n+m)</li><li>空间复杂度：O(1)</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>双指针的思维刚接触，有点难理解，需要花点时间慢慢梳理。参考解题方法，然后自己 debug。</p>`,21);function k(m,v){const e=t("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[s("题目链接："),n("a",r,[s("合并两个有序数组"),l(e)])]),d])}const g=p(u,[["render",k],["__file","合并两个有序数组.html.vue"]]);export{g as default};
