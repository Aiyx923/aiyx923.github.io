import{_ as e,r as o,o as c,c as l,a as n,b as s,d as t,e as p}from"./app-00a966d3.js";const i="/assets/Stack-dd594e0c.png",u="/assets/Queue-6edba7f8.png",r="/assets/LinkedlList-da0f2062.png",k="/assets/double_list-033094ae.png",d="/assets/circular_list-6eb7d233.png",h={},m=p('<h2 id="栈" tabindex="-1"><a class="header-anchor" href="#栈" aria-hidden="true">#</a> 栈</h2><blockquote><p><strong>栈（Stack）</strong> 是一种遵循 <em>先进后出（LIFO）</em> 的原则的有序集合。 新添加的或待删除的元素都保存在站的末尾，称为栈顶，另一端就叫栈底。 在栈里，新元素都靠近栈顶，旧元素都接近栈底。</p></blockquote><p>比如：一摞书、或者餐厅里的盘子。</p><p><img src="'+i+`" alt="Stack"></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 栈 先入后出</span>
<span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 入栈</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 入栈</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 入栈</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 入栈</span>
stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 入栈</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 出栈</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[1,2,3,4]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),v={href:"https://leetcode-cn.com/problems/valid-parentheses/",target:"_blank",rel:"noopener noreferrer"},b=p('<h2 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h2><blockquote><p><strong>队列（Queue）</strong> 是一种遵循 <em>后进先出（FIFO）</em> 原则的有序的项。 队列在尾部添加新元素，并从顶部移除元素，最新添加的元素必须排在队列的尾部。</p></blockquote><p>比如：餐厅里的排队取餐。</p><p><img src="'+u+'" alt="Queue"></p><ul><li>优先队列 设置优先级，然后在正确的位置添加元素</li><li>循环队列 每次执行都把队列的第一个元素移除，放置尾部。</li></ul><h2 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h2><blockquote><p><strong>链表（LinkedList）</strong> 储存有序的元素集合，每个元素都有一个储蓄元素本身的节点和一个指向下一个元素的引用（也称为指针或者链接）组成。</p></blockquote><p>比如：寻宝游戏或者火车的一系列车厢。</p><p><img src="'+r+`" alt="LinkedlList"></p><p>例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// {element: &#39;A&#39;, next:{element: &#39;B&#39;, next:{..}}}</span>
<span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">C</span><span class="token punctuation">;</span>
<span class="token comment">// 在 A 和 B 之间插入 E</span>
<span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">E</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">C</span><span class="token punctuation">;</span>
<span class="token comment">// 删除 E</span>
<span class="token punctuation">(</span><span class="token parameter"><span class="token constant">A</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">B</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">C</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>添加元素 <ol><li>把 A 的 next 指向 E</li><li>把 E 的 next 指向 B</li></ol></li><li>删除元素 <ol><li>把 A 的 next 指向 B</li><li>把 B 的 next 指向 C</li></ol></li></ul><h3 id="双向链表" tabindex="-1"><a class="header-anchor" href="#双向链表" aria-hidden="true">#</a> 双向链表</h3><p>链表是双向的，一个元素链向下一个元素同时也链向上一个元素。 <img src="`+k+`" alt="双向链表"></p><h3 id="循环链表" tabindex="-1"><a class="header-anchor" href="#循环链表" aria-hidden="true">#</a> 循环链表</h3><p>每个元素不仅链向下一个元素和上一个元素，而且头部和尾部的元素也相连，形成一个闭环。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>head<span class="token punctuation">.</span>prev <span class="token operator">=</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+d+'" alt="循环链表"></p><h3 id="图片来源" tabindex="-1"><a class="header-anchor" href="#图片来源" aria-hidden="true">#</a> 图片来源：</h3>',19),f={href:"https://juejin.im/post/594dfe795188250d725a220a",target:"_blank",rel:"noopener noreferrer"},g=p(`<h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h2><p>集合是由一组无序且唯一（即不能重复）的项组成的。这个数据结构使用了有限集合相同的数学概念，在数学中，集合是一组不同的对象（的集） 你可以把集合想象成一组没有重复元素，也没有顺序的数组（其实在 JS 中就是对象，ES6 中的 Set 数据结构就是是集合的实现,它类似数组，但是成员都是唯一的。 ）。 集合的一些操作：</p><ul><li>并集：对于给定两个集合，返回一个包含两个集合中所有元素的新集合。</li><li>交集：对于给定两个集合，返回一个包含两个集合中共有元素的新集合</li><li>差集：对于给定两个集合，返回一个所有存在于第一个集合且不存在与第二个集合的元素的新集合</li><li>子集：对于给定两个集合，验证一个集合，是否是另一个元素的子集。</li></ul><h2 id="字典" tabindex="-1"><a class="header-anchor" href="#字典" aria-hidden="true">#</a> 字典</h2><blockquote><p>字典和集合很相像，集合是以[值, 值]的形式储存的。字典则是以[键, 值]的形式来储存元素的，字典也称为 “映射” 字典储存的是[键, 值]对，其中键名是用来查询特定元素的。 EACAScript 6 中的 Map 数据结构就是字典的一种实现，它类似对象。</p></blockquote><h3 id="散列表-散列映射-hash" tabindex="-1"><a class="header-anchor" href="#散列表-散列映射-hash" aria-hidden="true">#</a> 散列表（散列映射 Hash）</h3><ul><li>散列算法：尽可能快得在数据结构中找到一个值。</li><li>处理散列表中的冲突（冲突原因：同一个位置只能存放一个值） <ul><li>分离链接：为散列表的每一个位置都创建一个链表并将元素存放在里面。</li><li>线性探查：当新元素加入列表时，如果索引为 index 的位置已被占据，则尝试 index+1 的位置，依次类推，已找到空位置未知。</li><li>双散列法</li></ul></li><li>更好的散列函数 djb2</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">djb2HashCode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> hash <span class="token operator">=</span> <span class="token number">5371</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> key<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    hash <span class="token operator">=</span> hash <span class="token operator">*</span> <span class="token number">33</span> <span class="token operator">+</span> key<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> hash <span class="token operator">%</span> <span class="token number">1013</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="树" tabindex="-1"><a class="header-anchor" href="#树" aria-hidden="true">#</a> 树</h2><blockquote><p>树是一种非顺序数据结构，它对于储存需要快速查找的数据非常有用。 树是一种分层的抽象模型，如：家谱，公司组织架构图等。</p></blockquote><p>每个树都有一个根节点以及多个子节点构成，节点分为内节点和外节点，至少有一个节点的的节点被称为内部节点，没有子元素的节点被称为外部节点。 树的高度，取决于所有节点深度的最大值。</p><h3 id="二叉树和二叉树搜索树" tabindex="-1"><a class="header-anchor" href="#二叉树和二叉树搜索树" aria-hidden="true">#</a> 二叉树和二叉树搜索树</h3><ul><li><p><strong>二叉树</strong>：最多只能有两个节点，一个是左侧子节点，一个是右侧子节点。</p></li><li><p><strong>二叉树搜索树</strong>：二叉树搜索树是二叉树的一种，但是它只允许你在左侧节点储存（比父节点）小的值，在右侧节点储存（比父节点）大（或者等于）的值。</p></li></ul><h4 id="二叉树遍历" tabindex="-1"><a class="header-anchor" href="#二叉树遍历" aria-hidden="true">#</a> 二叉树遍历</h4><blockquote><p>假如在保证“左子树一定先于右子树遍历”这个前提</p></blockquote><ul><li>先序遍历：根节点 -&gt; 左子树 -&gt; 右子树</li><li>中序遍历：左子树 -&gt; 根节点 -&gt; 右子树</li><li>后序遍历：左子树 -&gt; 右子树 -&gt; 根节点</li></ul><h2 id="图" tabindex="-1"><a class="header-anchor" href="#图" aria-hidden="true">#</a> 图</h2><blockquote><p>图是一种非线性数据结构。图是一种网络抽象模型，它是一组由边连接的节点（或顶点），任何二元关系都可以用图来表示。</p></blockquote><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h3><ul><li>有环或者无环的</li><li>有向图或者无向图</li><li>加权或者未加权的</li><li>是否是强连接的</li></ul><h3 id="图的表示" tabindex="-1"><a class="header-anchor" href="#图的表示" aria-hidden="true">#</a> 图的表示</h3><ul><li>邻接矩阵：是使用二维数组（矩阵）来描述图</li><li>领接表：使用动态数据结构（链表、数组、字典）来描述图</li><li>关联矩阵：矩阵的行表示顶点，列表示边</li></ul><h3 id="图的遍历" tabindex="-1"><a class="header-anchor" href="#图的遍历" aria-hidden="true">#</a> 图的遍历</h3><h4 id="广度优先搜索-bfs" tabindex="-1"><a class="header-anchor" href="#广度优先搜索-bfs" aria-hidden="true">#</a> 广度优先搜索（BFS）</h4><ul><li>队列实现：通过将顶点存入队列，最先入队列的顶线先被搜索。</li><li>简单理解：就是一层一层的访问遍历，走完为止。</li></ul><h4 id="深度优先搜索-dfs" tabindex="-1"><a class="header-anchor" href="#深度优先搜索-dfs" aria-hidden="true">#</a> 深度优先搜索（DFS）</h4><ul><li>栈实现：通过将顶点粗存入栈中，顶点沿着路径被探索的，存在新的相邻顶点就去访问。</li><li>简单理解：先从一条边走到头，然后在走下一条边，走完为止。</li></ul><p><strong>参考</strong></p>`,28),_={href:"https://www.jianshu.com/p/bff70b786bb6",target:"_blank",rel:"noopener noreferrer"};function x(w,y){const a=o("ExternalLinkIcon");return c(),l("div",null,[m,n("ul",null,[n("li",null,[s("案例："),n("a",v,[s("有效的括号"),t(a)])])]),b,n("ul",null,[n("li",null,[n("a",f,[s("掘金-在 JavaScript 中学习数据结构与算法"),t(a)])])]),g,n("ul",null,[n("li",null,[n("a",_,[s("基本算法——深度优先搜索（DFS）和广度优先搜索（BFS）"),t(a)])])])])}const S=e(h,[["render",x],["__file","数据结构.html.vue"]]);export{S as default};
