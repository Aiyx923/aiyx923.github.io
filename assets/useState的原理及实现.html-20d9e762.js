import{_ as e,r as p,o,c,a as n,b as a,d as t,e as l}from"./app-00a966d3.js";const u={},r=l(`<h1 id="usestate的原理及实现" tabindex="-1"><a class="header-anchor" href="#usestate的原理及实现" aria-hidden="true">#</a> useState的原理及实现</h1><blockquote><p>useState 是我们在 React(v16+) 中常用的 Hook，那它具体的原理是什么？又是怎样实现的呢？</p></blockquote><p><strong>useState 为什么仅在函数组件上可用，在class组件中不可用。</strong><br> 答：render方法 问题。</p><p><strong>useState 为什么在函数组件中可以维持状态？</strong><br> 答：因为Fiber，Fiber是存在内存中的，在mount时，就给每个state打上了key，然后每次更新都会记录前一个state，然后在更新，然后在走render，同步到页面。</p><p><strong>Fiber的更新方式和之前的 Stack reconciler 有什么不同。</strong><br> 答：Fiber是利用主线程空余的间隔时间进行逐步一段段的更新，把一个耗时很长的任务分片进行，将更新过程碎片化，并进行优先级排序。<br> 而 reconciler 则会自顶向下的递归mount/update，无法中断（持续占用主线程，可能会造成卡顿白屏），这样主线程上的布局、动画等周期性任务以及交互响应就无法立即得到处理，影响体验 渲染过程中没有优先级可言。</p><h2 id="实现简版" tabindex="-1"><a class="header-anchor" href="#实现简版" aria-hidden="true">#</a> 实现简版</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&quot;react-dom&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> lastState<span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  lastState <span class="token operator">=</span> lastState <span class="token operator">||</span> initialState<span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">newState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    lastState <span class="token operator">=</span> newState<span class="token punctuation">;</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">[</span>lastState<span class="token punctuation">,</span> setState<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>state<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setState</span><span class="token punctuation">(</span>state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Counter <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,8),i={href:"https://juejin.cn/post/6844903833764642830",target:"_blank",rel:"noopener noreferrer"},k={href:"https://blog.csdn.net/m0_46694056/article/details/122600029",target:"_blank",rel:"noopener noreferrer"};function d(v,m){const s=p("ExternalLinkIcon");return o(),c("div",null,[r,n("ul",null,[n("li",null,[n("a",i,[a("从源码剖析useState的执行过程"),t(s)])]),n("li",null,[n("a",k,[a("react技术分享----useState的原理及自定义useState的实现"),t(s)])])])])}const f=e(u,[["render",d],["__file","useState的原理及实现.html.vue"]]);export{f as default};
